// src/components/notes/OpenNote.jsx
import { useState, useEffect } from 'react';
import { useParams, useNavigate } from 'react-router-dom';
import { dummyNotes } from '../../data/notes';

// This will be a reusable component for both viewing/editing and creating notes
function NoteEditor({ noteId: propNoteId, isCreating = false }) {
  const params = useParams();
  const noteId = isCreating ? null : (propNoteId || params.noteId);
  const navigate = useNavigate();

  const [currentNote, setCurrentNote] = useState(null);
  const [isEditing, setIsEditing] = useState(isCreating); // Start in edit mode if creating
  const [title, setTitle] = useState('');
  const [content, setContent] = useState('');

  useEffect(() => {
    if (!isCreating && noteId) {
      const foundNote = dummyNotes.find(n => n.id === noteId);
      if (foundNote) {
        setCurrentNote(foundNote);
        setTitle(foundNote.title);
        setContent(foundNote.content);
        setIsEditing(false); // Start in read mode when opening an existing note
      } else {
        console.error("Note not found!");
        navigate('/user'); // Redirect if note not found
      }
    } else if (isCreating) {
      // For creating a new note, fields start empty
      setTitle('');
      setContent('');
      setIsEditing(true);
    }
  }, [noteId, isCreating, navigate]);

  const handleEditToggle = () => {
    if (isEditing && !isCreating && currentNote) {
      // If switching from Edit to Read for an existing note, reset changes
      setTitle(currentNote.title);
      setContent(currentNote.content);
    }
    setIsEditing(!isEditing);
  };

  const handleSave = () => {
    // TODO: Implement actual save logic (update dummyNotes or API call)
    const newLastEditDate = new Date().toLocaleDateString('en-GB');

    if (isCreating) {
      const newNote = {
        // In a real app, ID would be generated by the backend
        id: (dummyNotes.length + 1).toString(), // Simple ID generation for dummy data
        user_id: 'user123', // Assuming a default user for now
        title: title,
        content: content,
        lastEditDate: newLastEditDate,
      };
      dummyNotes.push(newNote); // Add to dummy data (won't persist across reloads)
      console.log("Created New Note:", newNote);
      navigate(`/user/note/${newNote.id}`); // Navigate to the newly created note
    } else if (currentNote) {
      // Update existing note
      const noteIndex = dummyNotes.findIndex(n => n.id === currentNote.id);
      if (noteIndex !== -1) {
        dummyNotes[noteIndex] = { ...currentNote, title, content, lastEditDate: newLastEditDate };
        setCurrentNote(dummyNotes[noteIndex]); // Update local state
      }
      console.log("Saved Existing Note:", dummyNotes[noteIndex]);
      setIsEditing(false);
    }
  };

  const handleCancelCreate = () => {
    navigate('/user'); // Go back to the notes list
  };


  if (!isCreating && !currentNote) {
    return (
      <div className="flex items-center justify-center h-[calc(100vh-150px)] text-white text-2xl">
        Loading note...
      </div>
    );
  }

  // For width matching NavBar, we'll assume NavBar is within a container that provides mx-8
  // So this component should also have mx-auto and max-width if NavBar has one
  // Or, we can wrap it in a similar container in App.jsx for this route
  return (
    <div className="w-full max-w-full mx-auto px-4 sm:px-6 lg:px-8 py-8 flex justify-center items-start min-h-[calc(100vh-80px)]">
      <div className="bg-green-900/20 rounded-xl shadow-2xl w-full max-w-[calc(100%-4rem)] /* Matches mx-8 on NavBar if NavBar is full-width inside its container */
                      lg:max-w-4xl /* Or a specific max-width like NavBar might have */
                      flex flex-col overflow-hidden border border-green-700/30 min-h-[70vh] max-h-[85vh]">
        {/* Header: Title and Action Buttons */}
        <div className="p-5 border-b border-green-700/30 flex-shrink-0 flex justify-between items-center">
          {/* Title Input / Display */}
          <div className="flex-grow mr-4">
            {isEditing ? (
              <input
                type="text"
                value={title}
                onChange={(e) => setTitle(e.target.value)}
                className="w-full bg-transparent text-2xl md:text-3xl font-semibold text-white focus:outline-none focus:border-b-2 focus:border-green-500 pb-1"
                placeholder="Note Title"
              />
            ) : (
              <h2 className="text-2xl md:text-3xl font-semibold text-white break-words">
                {currentNote?.title}
              </h2>
            )}
          </div>

          {/* Action Buttons */}
          <div className="flex-shrink-0 flex space-x-3">
            {isEditing ? (
              <>
                <button
                  onClick={handleSave}
                  className="px-5 py-2 rounded-md bg-green-600 text-white font-semibold hover:bg-green-700 transition-colors text-sm"
                >
                  {isCreating ? "Create" : "Save"}
                </button>
                <button
                  onClick={isCreating ? handleCancelCreate : handleEditToggle}
                  className="px-5 py-2 rounded-md bg-gray-600 text-white font-semibold hover:bg-gray-700 transition-colors text-sm"
                >
                  {isCreating ? "Cancel" : "Read"}
                </button>
              </>
            ) : (
              <button
                onClick={handleEditToggle}
                className="px-5 py-2 rounded-md bg-green-600 text-white font-semibold hover:bg-green-700 transition-colors text-sm"
              >
                Edit
              </button>
            )}
          </div>
        </div>

        {/* Body: Content Area */}
        {/* overflow-y-auto handles scrollbar visibility automatically */}
        <div className="p-5 flex-grow overflow-y-auto">
          {isEditing ? (
            <textarea
              value={content}
              onChange={(e) => setContent(e.target.value)}
              className="w-full h-full min-h-[300px] bg-transparent text-gray-200 text-base leading-relaxed focus:outline-none resize-none"
              placeholder="Start typing your note..."
            />
          ) : (
            <p className="text-gray-200 text-base leading-relaxed whitespace-pre-wrap break-words">
              {currentNote?.content}
            </p>
          )}
        </div>

        {/* Footer: Last Edit Date */}
        {!isEditing && currentNote?.lastEditDate && (
          <div className="p-3 border-t border-green-700/30 text-right text-xs text-gray-400 flex-shrink-0">
            Last Edited: {currentNote.lastEditDate}
          </div>
        )}
      </div>
    </div>
  );
}
// Keep OpenNote as a wrapper for now, passing the noteId
function OpenNote() {
    return <NoteEditor />;
}
export default OpenNote; // This will be used for /user/note/:noteId
// We'll also export NoteEditor directly for the create page
export { NoteEditor };
